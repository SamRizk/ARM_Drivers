/*
 * RCC.c
 *
 *  Created on: Jan 30, 2023
 *      Author: samir
 */

#include "../../include/LIB/Bit_math.h"
#include "../../include/LIB/Std_types.h"

#include "../../include/MCLA/RCC/RCC.h"
#include "../../include/MCLA/RCC/RCC_priv.h"
#include "../../include/MCLA/RCC/RCC_cfg.h"


/**************************** RCC_Init *******************************/
RCC_enuErrorStatus RCC_enuInit( void )
{
     u32 LOC_u32TimeOut = 0;
        RCC_enuErrorStatus LOC_enuState = RCC_OK;

             /*  For HSI  */
        #if CLOCK_TYPE == HSI

            CLR_BIT(RCC_REG->RCC_CFGR,0);
            CLR_BIT(RCC_REG->RCC_CFGR,1);

            SET_BIT(RCC_REG->RCC_CR, HSI);

            while( ( ( GET_BIT( RCC_REG->CR , 1 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) )
            {
                 LOC_u32TimeOut++;
            }
		    if( LOC_u32TimeOut >= 100000 )
            {
                 LOC_enuState = RCC_TimeOut;
            }


              /*  For HSE  */
        #elif CLOCK_TYPE == HSE 
            SET_BIT(RCC_REG->RCC_CFGR,0);
            CLR_BIT(RCC_REG->RCC_CFGR,1);

            SET_BIT(RCC_REG->RCC_CR, HSE);

            while( ( ( GET_BIT( RCC_REG->RCC_CR , 17 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) )
            {
                LOC_u32TimeOut++;
            }
		    if( LOC_u32TimeOut >= 100000 )
            {
                LOC_enuState = RCC_TimeOut;
            }
            

             /*  For Pll  */
        #elif CLOCK_TYPE == PLL
            CLR_BIT(RCC_REG->RCC_CFGR,0);
            SET_BIT(RCC_REG->RCC_CFGR,1);
            

        #endif   


        /* For Clock Security System */
	#if CLOCK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM

		SET_BIT( RCC_REG->RCC_CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( RCC_REG->RCC_CR , 19 );

	#else

		LOC_enuState = RCC_Wrong_Clock_Security_System_Configuration_Choice;

	#endif
        return LOC_enuState;
}


/**************************** RCC_EnablePeripheralClock *******************************/


RCC_enuErrorStatus RCC_enuEnablePeripheralClock ( u8 Copy_u8PeripheralBus  , u8 Copy_u8Peripheral )
{       
    RCC_enuErrorStatus LOC_enuState = RCC_OK;
    	
        switch( Copy_u8PeripheralBus )
        {

			case AHB1_BUS  : SET_BIT( RCC_REG->RCC_AHB1ENR ,  Copy_u8Peripheral ); break;
			case AHB2_BUS  : SET_BIT( RCC_REG->RCC_AHB2ENR ,  Copy_u8Peripheral ); break;
            case APB1_BUS :	 SET_BIT( RCC_REG->RCC_APB1ENR ,  Copy_u8Peripheral );  break;
			case APB2_BUS :  SET_BIT( RCC_REG->RCC_APB2ENR ,  Copy_u8Peripheral );  break;
            default: LOC_enuState = RCC_InvalidPeripheral;

		}
        return LOC_enuState;
       
}







/**************************** RCC_DisablePeripheralClock *******************************/



RCC_enuErrorStatus RCC_enuDisablePeripheralClock( u8 Copy_u8PeripheralBus  , u8 Copy_u8Peripheral )
{
     RCC_enuErrorStatus LOC_enuState = RCC_OK;
    	
        switch( Copy_u8PeripheralBus )
        {

			case AHB1_BUS  : CLR_BIT( RCC_REG->RCC_AHB1ENR ,  Copy_u8Peripheral ); break;
			case AHB2_BUS  : CLR_BIT( RCC_REG->RCC_AHB2ENR ,  Copy_u8Peripheral ); break;
            case APB1_BUS :	 CLR_BIT( RCC_REG->RCC_APB1ENR ,  Copy_u8Peripheral );  break;
			case APB2_BUS :  CLR_BIT( RCC_REG->RCC_APB2ENR ,  Copy_u8Peripheral );  break;
            default: LOC_enuState = RCC_InvalidPeripheral;

		}
        return LOC_enuState;

}




/**************************** RCC_ResetPeripheralClock *******************************/

RCC_enuErrorStatus RCC_enuResetPeripheralClock ( u8 Copy_u8PeripheralBus  , u8 Copy_u8Peripheral )
{
     RCC_enuErrorStatus LOC_enuState = RCC_OK;
    	
        switch( Copy_u8PeripheralBus ){

			case AHB1_BUS  : SET_BIT( RCC_REG->RCC_AHB1RSTR ,  Copy_u8Peripheral );  break;
			case AHB2_BUS  : SET_BIT( RCC_REG->RCC_AHB2RSTR ,  Copy_u8Peripheral );  break;
            case APB1_BUS :	 SET_BIT( RCC_REG->RCC_APB1RSTR ,  Copy_u8Peripheral );  break;
			case APB2_BUS :  SET_BIT( RCC_REG->RCC_APB2RSTR ,  Copy_u8Peripheral );  break;
            default: LOC_enuState = RCC_InvalidPeripheral;

		}
        return LOC_enuState;
}

/**************************** RCC_SetPrescaler *******************************/

RCC_enuErrorStatus RCC_enuSetPrescaler(void )
{
    RCC_enuErrorStatus LOC_enuState = RCC_OK;
	#if   APB1_PRE_SCALER == CLOCK_NOT_DIVIDED
         CLR_BIT(RCC_REG->RCC_CFGR,12);
    #elif APB1_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_2
        SET_BIT(RCC_REG->RCC_CFGR,12);
        CLR_BIT(RCC_REG->RCC_CFGR,11);
        CLR_BIT(RCC_REG->RCC_CFGR,10);
        
    #elif APB1_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_4
        SET_BIT(RCC_REG->RCC_CFGR,12);
        CLR_BIT(RCC_REG->RCC_CFGR,11);
        SET_BIT(RCC_REG->RCC_CFGR,10);

    #elif APB1_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_8
        SET_BIT(RCC_REG->RCC_CFGR,12);
        SET_BIT(RCC_REG->RCC_CFGR,11);
        CLR_BIT(RCC_REG->RCC_CFGR,10);


    #elif APB1_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_16
        SET_BIT(RCC_REG->RCC_CFGR,12);
        SET_BIT(RCC_REG->RCC_CFGR,11);
        SET_BIT(RCC_REG->RCC_CFGR,10);
    #else
        LOC_enuState = RCC_InvalidPreScaler;
   #endif

    #if   APB2_PRE_SCALER == CLOCK_NOT_DIVIDED
         CLR_BIT(RCC_REG->RCC_CFGR,15);
    #elif APB2_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_2
        SET_BIT(RCC_REG->RCC_CFGR,15);
        CLR_BIT(RCC_REG->RCC_CFGR,14);
        CLR_BIT(RCC_REG->RCC_CFGR,13);
        
    #elif APB2_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_4
        SET_BIT(RCC_REG->RCC_CFGR,15);
        CLR_BIT(RCC_REG->RCC_CFGR,14);
        SET_BIT(RCC_REG->RCC_CFGR,13);

    #elif APB2_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_8
        SET_BIT(RCC_REG->RCC_CFGR,15);
        SET_BIT(RCC_REG->RCC_CFGR,14);
        CLR_BIT(RCC_REG->RCC_CFGR,13);


    #elif APB2_PRE_SCALER == AHB_CLOCK_DIVIDED_BY_16
        SET_BIT(RCC_REG->RCC_CFGR,15);
        SET_BIT(RCC_REG->RCC_CFGR,14);
        SET_BIT(RCC_REG->RCC_CFGR,13);
    #else
        LOC_enuState = RCC_InvalidPreScaler;
    #endif

    #if   AHB_PRE_SCALER == SYSTEM_CLOCK_NOT_DIVIDED
        CLR_BIT(RCC_REG->RCC_CFGR,7);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_2
        SET_BIT(RCC_REG->RCC_CFGR,7);
        CLR_BIT(RCC_REG->RCC_CFGR,6);
        CLR_BIT(RCC_REG->RCC_CFGR,5);
        CLR_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_4
        SET_BIT(RCC_REG->RCC_CFGR,7);
        CLR_BIT(RCC_REG->RCC_CFGR,6);
        CLR_BIT(RCC_REG->RCC_CFGR,5);
        SET_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_8
        SET_BIT(RCC_REG->RCC_CFGR,7);
        CLR_BIT(RCC_REG->RCC_CFGR,6);
        SET_BIT(RCC_REG->RCC_CFGR,5);
        CLR_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_16
        SET_BIT(RCC_REG->RCC_CFGR,7);
        CLR_BIT(RCC_REG->RCC_CFGR,6);
        SET_BIT(RCC_REG->RCC_CFGR,5);
        SET_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_64
        SET_BIT(RCC_REG->RCC_CFGR,7);
        SET_BIT(RCC_REG->RCC_CFGR,6);
        CLR_BIT(RCC_REG->RCC_CFGR,5);
        CLR_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_128
        SET_BIT(RCC_REG->RCC_CFGR,7);
        SET_BIT(RCC_REG->RCC_CFGR,6);
        CLR_BIT(RCC_REG->RCC_CFGR,5);
        SET_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_256
        SET_BIT(RCC_REG->RCC_CFGR,7);
        SET_BIT(RCC_REG->RCC_CFGR,6);
        SET_BIT(RCC_REG->RCC_CFGR,5);
        CLR_BIT(RCC_REG->RCC_CFGR,4);

    #elif AHB_PRE_SCALER == SYSTEM_CLOCK_DIVIDED_BY_512
        SET_BIT(RCC_REG->RCC_CFGR,7);
        SET_BIT(RCC_REG->RCC_CFGR,6);
        SET_BIT(RCC_REG->RCC_CFGR,5);
        SET_BIT(RCC_REG->RCC_CFGR,4);

    #endif

}

/**************************** RCC_RuningSysClock *******************************/

RCC_CLOCK RCC_enuRuningSysClock (void)
{
    RCC_CLOCK LOC_enuRunableBus = RCC_HSI;
    
    if       ( !(GET_BIT(RCC_REG->RCC_CFGR,3)) && !(GET_BIT(RCC_REG->RCC_CFGR,2)) ) LOC_enuRunableBus = RCC_HSI;
    
    else if  ( !(GET_BIT(RCC_REG->RCC_CFGR,3)) &&  (GET_BIT(RCC_REG->RCC_CFGR,2)) ) LOC_enuRunableBus = RCC_HSE;

    else LOC_enuRunableBus = RCC_PLL;

    return LOC_enuRunableBus;
}
